// 원시타입 vs 객체타입
// 원시 타입
// Number, String, Boolean 등... 값 자체로써 변수에 저장되고 복사 된다.
// 값이 변경되면 메모리에 있는 값이 수정되는 것이 아니라 새로운 메모리에 변수 저장되어 불변값이라 함

let p1 = 1;
let p2 = p1;

p2 = 2;

// 객체 타입
// Object, Array, Function등...
// 참조값을 통해 변수에 저장되고 복사된다
// o2 변수가 o1을 바라보고 있기 때문에 o2의 값이 변경되면 메모리 o1의 원본값이 변경되서 가변값이다

let o1 = { name: "이정환" };
let o2 = o1; // 얕은 복사 객체의 참조값을 복사 -> 원본 객체가 수정될 수 있어 위험
let o3 = { ...o1 }; // 갚은 복사 새로운 객체를 생성하면서 프로퍼티만 따로 복사 -> 원본 객체가 수정될 일 없이 안전함

o2.name = "홍길동";

// 객체 타입의 값을 변경할 때 의도치 않게 값이 수정될 수 있다.
// 사이드 이펙트 : 의도하지 않았는데 다른 값의 변화를 가저오는 현상

console.log(o1 === o2); // true 서로 같은 참조값을 가지기 때문에 -> 얕은 비교
console.log(o1 === o3); // False 객체간의 비교연산은 참조값을 기준으로 이뤄지기 때문에 서로 다른 참조값을 가짐으로 false 출력

// 참조값이 아닌 프로퍼티 기준으로 비교하고 싶다면 JSON.stringify()같은 객체를 문자열로 형 변환하는 함수를 사용하여 비교 -> 깊은 비교
JSON.stringify(o1) === JSON.stringify(o2);
